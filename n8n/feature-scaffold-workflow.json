{
  "name": "Feature-Scaffold",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "create-pr",
        "options": {}
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        560,
        16
      ],
      "id": "782b87b6-bcc5-4545-b3b0-f6dfd0223d8d",
      "webhookId": "689b759c-d13b-4ed4-82e1-19388f269d87"
    },
    {
      "parameters": {
        "url": "https://api.github.com/repos/Seshu24/feature-scaffold/git/ref/heads/main",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n\"Authorization\": \"Bearer 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\",\n\"Accept\": \"application/vnd.github.v3+json\"\n}",
        "options": {}
      },
      "name": "Get Base SHA",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        752,
        16
      ],
      "id": "8a707c01-c448-4c10-a3f0-7ffb30766df8"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.github.com/repos/Seshu24/feature-scaffold/git/refs",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n          \"Authorization\": \"Bearer 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\",\n          \"Accept\": \"application/vnd.github.v3+json\",\n          \"Content-Type\": \"application/json\"\n        }",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n          \"ref\": \"refs/heads/feature_scaffold_{{ $execution.id }}\",\n          \"sha\": \"{{ $json.object.sha }}\"\n        }",
        "options": {}
      },
      "name": "Create Branch",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        944,
        16
      ],
      "id": "55d0f8c3-4819-4426-be03-164678004f29"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.github.com/repos/Seshu24/feature-scaffold/pulls",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n          \"Authorization\": \"Bearer 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\",\n          \"Accept\": \"application/vnd.github.v3+json\",\n          \"Content-Type\": \"application/json\"\n        }",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": \"{{ $('Create Git Commit').item.json.message }} \",\n  \"head\": \"feature_scaffold_{{ $execution.id }}\",\n  \"base\": \"main\",\n  \"body\": \"Auto-generated scaffold via agent.\"\n}",
        "options": {}
      },
      "name": "GitHub Create PR",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2288,
        16
      ],
      "id": "b88f666c-f486-4d3f-b034-b131f119877b"
    },
    {
      "parameters": {
        "jsCode": "const input = $('Webhook').first().json.body.generatedCode\n\n// Normalize escaped newlines to real newlines\nconst normalizedInput = input.replace(/\\\\n/g, '\\n');\n\nconst fileRegex = /\\/\\/\\s*File:\\s*(.+?)\\n([\\s\\S]*?)(?=\\n\\/\\/\\s*File:|$)/g;\n\nconst results = [];\nlet match;\nlet count = 0;\n\nwhile ((match = fileRegex.exec(normalizedInput)) !== null) {\n  const rawPath = match[1].trim();\n  const rawContent = match[2].trim();\n\n  const path = rawPath.replace(/^\\.\\//, '');\n  const encodedContent = Buffer.from(rawContent, 'utf8').toString('base64');\n\n  results.push({ json: { path, encodedContent } });\n  count++;\n}\n\nif (count === 0) {\n  return [{\n    json: {\n      error: \"No matches found. Check formatting of generatedCode.\",\n      preview: input.slice(0, 500)\n    }\n  }];\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        16
      ],
      "id": "8950fb41-ad95-4694-a7b8-db0cd760ed9c",
      "name": "Encode the generated code",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "const baseTreeSha = $('Create Branch').first().json.object.sha; // from \"Get Base SHA\"\nconst featureName = $('Webhook').first().json.body.featureName;\n\nconst tree = $input.all().map(item => {\n  const { path, encodedContent } = item.json;\n  const decodedContent = Buffer.from(encodedContent, 'base64').toString('utf8');\n  // If content looks like a stringified JSON blob, clean it\nconst looksStringified = decodedContent.trim().startsWith('\"') && decodedContent.trim().endsWith('\"');\nconst cleanedContent = looksStringified\n  ? JSON.parse(decodedContent) // parses and returns raw string\n  : decodedContent;\n\n  return {\n    path,\n    mode: \"100644\",\n    type: \"blob\",\n    content: cleanedContent\n  };\n});\n\nreturn [{\n  json: {\n    tree,\n    base_tree_sha: baseTreeSha,\n    featureName\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1328,
        16
      ],
      "id": "1461df8f-5eac-4caa-a8cf-f52d862e7554",
      "name": "Build Tree Payload"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.github.com/repos/Seshu24/feature-scaffold/git/trees",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n          \"Authorization\": \"Bearer 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\",\n          \"Accept\": \"application/vnd.github.v3+json\",\n          \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "base_tree",
              "value": "={{ $json.base_tree_sha }}"
            },
            {
              "name": "tree",
              "value": "={{ $json.tree }}"
            }
          ]
        },
        "options": {
          "response": {}
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1760,
        16
      ],
      "id": "1121ace5-37bb-4643-9246-eb5bd8548ac5",
      "name": "Create Git Tree"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.github.com/repos/Seshu24/feature-scaffold/git/commits",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n          \"Authorization\": \"Bearer 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\",\n          \"Accept\": \"application/vnd.github.v3+json\",\n          \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"message\": \"Add scaffold for {{ $('Build Tree Payload').item.json.featureName }}\",\n  \"tree\": \"{{ $json.sha }}\",\n  \"parents\": [\"{{ $('Build Tree Payload').item.json.base_tree_sha }}\"]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1936,
        16
      ],
      "id": "9fdcb316-4ab3-4433-bce7-38a04f9a1a05",
      "name": "Create Git Commit"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "=https://api.github.com/repos/Seshu24/feature-scaffold/git/refs/heads/feature_scaffold_{{ $execution.id }}",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n          \"Authorization\": \"Bearer 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\",\n          \"Accept\": \"application/vnd.github.v3+json\",\n          \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"sha\": \"{{ $json.sha }}\",\n  \"force\": false\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2112,
        16
      ],
      "id": "cf877e45-288e-45c1-86e2-b52e505d6eb2",
      "name": "Update branch Ref"
    },
    {
      "parameters": {
        "jsCode": "const tree = $input.first().json.tree || [];\n\nconst issues = [];\n\nconst validatedTree = tree.map((item, index) => {\n  const { path, mode, type, content } = item;\n\n  // Check required fields\n  if (!path || !mode || !type || typeof content !== 'string') {\n    issues.push(`Item ${index} is missing required fields or has invalid content type.`);\n    return null;\n  }\n\n  // Check for double-escaped content\n  if (content.includes('\\\\n') || content.includes('\\\\\"')) {\n    issues.push(`Item ${index} (${path}) has double-escaped characters.`);\n  }\n\n  // Check for stringified JSON\n  if (content.trim().startsWith('\"') && content.trim().endsWith('\"')) {\n    issues.push(`Item ${index} (${path}) may be stringified â€” content starts and ends with quotes.`);\n  }\n\n  return item;\n}).filter(Boolean);\n\nif (issues.length > 0) {\n  throw new Error(`Validation failed:\\n${issues.join('\\n')}`);\n}\n\nreturn [{\n  json: {\n    tree: validatedTree,\n    base_tree_sha: $input.first().json.base_tree_sha,\n    message: \"Tree payload passed validation.\"\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1536,
        16
      ],
      "id": "ce144af6-1b9f-44b9-8384-167ae11e32bc",
      "name": "Validate Tree payload"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Get Base SHA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Base SHA": {
      "main": [
        [
          {
            "node": "Create Branch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Branch": {
      "main": [
        [
          {
            "node": "Encode the generated code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Encode the generated code": {
      "main": [
        [
          {
            "node": "Build Tree Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Tree Payload": {
      "main": [
        [
          {
            "node": "Validate Tree payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Git Tree": {
      "main": [
        [
          {
            "node": "Create Git Commit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Git Commit": {
      "main": [
        [
          {
            "node": "Update branch Ref",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update branch Ref": {
      "main": [
        [
          {
            "node": "GitHub Create PR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Tree payload": {
      "main": [
        [
          {
            "node": "Create Git Tree",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "bdf04d40-6025-45ee-ae3e-1bf95cb3d6a1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5c5ac0d0af4d80aac5b7b2926aabf3896bb17d2c78a2a10e80ff58854ee68d16"
  },
  "id": "jo8J0qVj3LCLZqzg",
  "tags": []
}